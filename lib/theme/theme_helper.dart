import 'package:flutter/material.dart';
import 'package:mithilesh_s_application1/core/utils/size_utils.dart';


String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray50,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.black900,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.black900.withOpacity(0.6),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 17.fSize,
          fontFamily: 'Segoe UI',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 14.fSize,
          fontFamily: 'Segoe UI',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black900.withOpacity(0.6),
          fontSize: 10.fSize,
          fontFamily: 'Segoe UI',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 12.fSize,
          fontFamily: 'Segoe UI',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 11.fSize,
          fontFamily: 'Segoe UI',
          fontWeight: FontWeight.w700,
        ),
        labelSmall: TextStyle(
          color: appTheme.black900.withOpacity(0.6),
          fontSize: 9.fSize,
          fontFamily: 'Segoe UI',
          fontWeight: FontWeight.w600,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20.fSize,
          fontFamily: 'Segoe UI',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 17.fSize,
          fontFamily: 'Segoe UI',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 14.fSize,
          fontFamily: 'Segoe UI',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFC499F3),
    primaryContainer: Color(0XFFFC433E),
    secondary: Color(0XFFFC433E),
    secondaryContainer: Color(0XFF870000),
    tertiary: Color(0XFFFC433E),
    tertiaryContainer: Color(0XFF870000),

    // Background colors
    background: Color(0XFFFC433E),

    // Surface colors
    surface: Color(0XFFFC433E),
    surfaceTint: Color(0XFF870000),
    surfaceVariant: Color(0XFF870000),

    // Error colors
    error: Color(0XFF870000),
    errorContainer: Color(0XFFFC4648),
    onError: Color(0XFFFEA600),
    onErrorContainer: Color(0XFF09111E),

    // On colors(text colors)
    onBackground: Color(0XFF09111E),
    onInverseSurface: Color(0XFFFEA600),
    onPrimary: Color(0XFF870000),
    onPrimaryContainer: Color(0XFF09111E),
    onSecondary: Color(0XFF09111E),
    onSecondaryContainer: Color(0XFFFEA600),
    onTertiary: Color(0XFF09111E),
    onTertiaryContainer: Color(0XFFFEA600),

    // Other colors
    outline: Color(0XFF870000),
    outlineVariant: Color(0XFFFC433E),
    scrim: Color(0XFFFC433E),
    shadow: Color(0XFF870000),

    // Inverse colors
    inversePrimary: Color(0XFFFC433E),
    inverseSurface: Color(0XFF870000),

    // Pending colors
    onSurface: Color(0XFF09111E),
    onSurfaceVariant: Color(0XFFFEA600),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => Color(0XFFF2BA09);
  Color get amber50001 => Color(0XFFFDBC01);
  Color get amber700 => Color(0XFFFBA506);
  Color get amber70001 => Color(0XFFFEA500);

  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray400 => Color(0XFF888888);

  // Gray
  Color get gray100 => Color(0XFFF1F5F8);
  Color get gray200 => Color(0XFFEFEFEF);
  Color get gray400 => Color(0XFFD9BEB7);
  Color get gray40099 => Color(0X99BFBFBF);
  Color get gray50 => Color(0XFFFAFAFA);
  Color get gray600 => Color(0XFF777777);
  Color get gray900 => Color(0XFF09121F);

  // LightGreen
  Color get lightGreen200 => Color(0XFFCADE8E);
  Color get lightGreen300 => Color(0XFFC6D989);

  // Lime
  Color get lime200 => Color(0XFFEDD199);
  Color get limeA700 => Color(0XFF98CB00);
  Color get limeA70001 => Color(0XFF98CB02);

  // Red
  Color get red200 => Color(0XFFE7B3A0);
  Color get red20001 => Color(0XFFE6B3A0);
  Color get red300 => Color(0XFFD77E75);
  Color get red30001 => Color(0XFFD87F76);
  Color get red30002 => Color(0XFFBC6D72);
  Color get red30003 => Color(0XFFDE6A6E);
  Color get red500 => Color(0XFFFD4641);

  // Teal
  Color get teal200 => Color(0XFF78C4CD);
  Color get teal20001 => Color(0XFF70ACD3);
  Color get teal20002 => Color(0XFF77C4CD);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);

  //light white
  Color get lightWhite => Color(0XFAFAFAFA);

  // purple
  Color get purple => Color(0XFFC499F3); ///TODO: Change COlor to (#6341b5)
  // Color get purple => Color(0XFF6945BF);

}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
